name: 'TerraformGithubActions'

on:
  push:
    branches:
    - 'main'
  pull_request:

jobs:

 runSH:
    name: Run remote backend script
          
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Run  remote backend script 
        run: sh ./remote.sh
 docker-for-terratestr:
    needs: runSH
    runs-on: ubuntu-latest
    container:
      image: nawrasbelhoula/containerterra:1.0
      credentials:
       username: ${{ secrets.DOCKERHUB_USERNAME_N}}
       password: ${{ secrets.DOCKERHUB_PASSWORD_N}}
  
    steps:
      - uses: actions/checkout@v2
      - name: run in container
        run: sh ./docker-tests.sh 
   
 terraform:
    needs:  docker-for-terratestr
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID_N}}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET_N}}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_N}}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID_N}}
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color


    - name: Terraform Plan
      id: plan
      run: terraform plan -detailed-exitcode -input=false -out=plan.out
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: steps.plan.outputs.exitcode == 2
      run: terraform apply -auto-approve





